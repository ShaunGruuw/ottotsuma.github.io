/*  for(let i=0;i<100;)console.log((++i%3?'':'fizz')+(i%5?'':'buzz')||i)


Declare a function 'swap'.

'swap' takes one object input.

`swap` returns a new object with each key-value pair swapped.

Keys become values and values become keys.

() --> parentheses
{} --> curly braces/brackets
[] --> square braces/brackets

*/

const testObject = {
  a: 1,
   b: 2,
    c: 3,
     d: 4
   };

function Swap(z) {


let keys = Object.keys (z);
let vals = Object.values (z);

console.log(keys);

var result = {};
vals.forEach((key, i) => result[key] = keys[i]);

console.log(result);
}

Swap(testObject);


// compound

var invest; // increase
var rate; // %
var amount; // total amount starting?
var time
time = 1;
rate = 0.05;
invest = 21165;
amount = 22764;

for(var i = 1; i <= time; i++){
    amount = (amount + invest) * (1.0 + rate);
    console.log("years " + i + " = " + Math.round(amount));

}

// Lvl AikaGlobal  Aika EN
//     Char Exp    Char Exp    Pran Exp
// 1   0           0           0
// 2   200         200         855
// 3   538         538         2106
// 4   1,171        1171        3864
// 5   2294        2294        6253
// 6   4142        4142        9410
// 7   6992        6992        13490
// 8   11,164       11164       18660
// 9   17025       17025       25107
// 10  24988       24988       33031
// 11  35514       35514       42650
// 12  49114       49114       54200
// 13  66350       66350       67934
// 14  87839       87839       84123
// 15  114,252      114252      103060
// 16  146316      146316      125053
// 17  184816      184816      150433
// 18  230596      230596      179549
// 19  284563      284563      212772
// 20  347686      347686      250495
// 21  420998      420998      293131
// 22  505598      505598      341116
// 23  602652      602652      394909
// 24  713397      713397      454991
// 25  839140      839140      521868
// 26  981260      981260      596070
// 27  1,141,210     1141210     678150
// 28  1320518     1320518     768687
// 29  1520791     1520791     868287
// 30  1743714     1743714     977581
// 31  1991052     1991052     1097225
// 32  2264652     2264652     1227905
// 33  2566444     2566444     1370331
// 34  2898445     2898445     1525245
// 35  3262758     3262758     1693414
// 36  3661574     3661574     1875635
// 37  4097174     4097174     2072735
// 38  4571930     4571930     2285570
// 39  5088309     5088309     2515026
// 40  5648872     5648872     2762023
// 41  6256276     6256276     3027508
// 42  6913276     6913276     3312463
// 43  7622726     7622726     3617900
// 44  8387583     8387583     3944865
// 45  9210906     9210906     4294438
// 46  10,095,858    10095858    4667731
// 47  11045708    11045708    5065891
// 48  12063832    12063832    5490100
// 49  13153717    13153717    5941574
// 50  14318960    14318960    6421566
// 51  16872987    19427014    6931365
// 52  20218395    22772422    7472295
// 53  23887515    26441542    8045718
// 54  28172955    30726982    8653035
// 55  33088539    35642566    9295684
// 56  38648091    41202118    9975140
// 57  44865435    47419462    10692920
// 58  52053915    54607942    11450577
// 59  60234267    62788294    12249708
// 60  69120795    71674822    13091947
// 61  84615195    87169222    13978970
// 62  90542235    93096262    14912495
// 63  97150683    99704710    15894281
// 64  104,456,667   107010694   16926129
// 65  113093211   115647238   18009886
// 66  123092571   125646598   19147438
// 67  135499841   138053868   20340718
// 68  150373083   152927110   21591701
// 69  167510696   170064723   22902408
// 70  187095733   189649760   24274906
// 71  212376373   214930400   25711306
// 72  264454491   267008518   27213766
// 73  327908897   330462924   28784491
// 74  405014849   407568876   30425732
// 75  501586894   504140921   32139789
// 76  642400059   644954086   33929008
// 77  659385262   661939289   35795788
// 78  679717371   682271398   37742572
// 79  703112417   705666444   39771856
// 80  729812263   732366290   41886185
// 81  764231143   766785170   44088153
// 82  775540903   778094930   46380408
// 83  788114695   790668722   48765646
// 84  801976711   804530738   51246619
// 85  818318407   820872434   53826128
// 86  837188167   839742194   56507028
// 87  860540705   863094732   59292228
// 88  888463111   891017138   62184690
// 89  920556218   923110245   65187430
// 90  957142989   959697016   68303522
// 91  1,004,256,909  1006810936  71536091
// 92  1028580237  1031134264  74888321
// 93  1057231629  1059785656  78363450
// 94  1090289421  1092843448  81964774
// 95  1127831949  1130385976  85695647
// 96  1169937549  1172491576  89556069
// 97  1218809421  1221363448  93546040
// 98  1274565069  1277119096  97665560
// 99  1428211341  1430765368  101914629
// 100 1428211341  1430765368  106293247


function getMiddle(s)
{
 var l = s.length /2

  if (l % 2 === 0) {
    return(s.substr(l - 1, 2));
} else
  return(s.charAt(l));
  }

console.log(getMiddle("test"))
console.log(getMiddle("middle"))
